[
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "HTTP_200_OK",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_401_UNAUTHORIZED",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_403_FORBIDDEN",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_400_BAD_REQUEST",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_201_CREATED",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "SocialToken",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "SocialApp",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "SocialToken",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "SocialToken",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "SocialApp",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "SocialAccount",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "SocialToken",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "google.auth",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.auth",
        "description": "google.auth",
        "detail": "google.auth",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.credentials",
        "description": "google.oauth2.credentials",
        "isExtraImport": true,
        "detail": "google.oauth2.credentials",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.credentials",
        "description": "google.oauth2.credentials",
        "isExtraImport": true,
        "detail": "google.oauth2.credentials",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "EmailAddress",
        "importPath": "allauth.account.models",
        "description": "allauth.account.models",
        "isExtraImport": true,
        "detail": "allauth.account.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "DefaultSocialAccountAdapter",
        "importPath": "allauth.socialaccount.adapter",
        "description": "allauth.socialaccount.adapter",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.adapter",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "pre_social_login",
        "importPath": "allauth.socialaccount.signals",
        "description": "allauth.socialaccount.signals",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.signals",
        "documentation": {}
    },
    {
        "label": "social_account_updated",
        "importPath": "allauth.socialaccount.signals",
        "description": "allauth.socialaccount.signals",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.signals",
        "documentation": {}
    },
    {
        "label": "social_account_added",
        "importPath": "allauth.socialaccount.signals",
        "description": "allauth.socialaccount.signals",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.signals",
        "documentation": {}
    },
    {
        "label": "allauth.socialaccount",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "allauth.socialaccount",
        "description": "allauth.socialaccount",
        "detail": "allauth.socialaccount",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "TextInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "PasswordInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "importPath": "allauth.account.forms",
        "description": "allauth.account.forms",
        "isExtraImport": true,
        "detail": "allauth.account.forms",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "get_random_secret_key",
        "importPath": "django.core.management.utils",
        "description": "django.core.management.utils",
        "isExtraImport": true,
        "detail": "django.core.management.utils",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sign_up_view",
        "kind": 2,
        "importPath": "base.api.views.auth",
        "description": "base.api.views.auth",
        "peekOfCode": "def sign_up_view(request):\n   username = validate_username(request.data['username'])\n   email = validate_email(request.data['email'])\n   password = request.data['password']\n   password_confirmation = request.data['password_confirmation']\n   if password_confirmation != password:\n      return Response({'message': 'Password1 does not match password'},\n                       status=HTTP_400_BAD_REQUEST)\n   user = User.objects.create(username=username, email=email, password=password)\n   refresh  = RefreshToken.for_user(user)",
        "detail": "base.api.views.auth",
        "documentation": {}
    },
    {
        "label": "sign_in_view",
        "kind": 2,
        "importPath": "base.api.views.auth",
        "description": "base.api.views.auth",
        "peekOfCode": "def sign_in_view(request):\n   username = request.data.get('username')\n   password = request.data.get('password')\n   user  = authenticate(request, username=username, password=password)\n   if user is not None:\n      login(request, user)\n      refresh = RefreshToken.for_user(user)\n      refresh_token = str(refresh)\n      token = str(refresh.access_token)\n      return Response({",
        "detail": "base.api.views.auth",
        "documentation": {}
    },
    {
        "label": "messages_list",
        "kind": 2,
        "importPath": "base.api.views.messages",
        "description": "base.api.views.messages",
        "peekOfCode": "def messages_list(request):\n    email_list = []\n    # socialApp = SocialApp.objects.get(provider='google')\n    socialGoogleToken = SocialToken.objects.filter(account__user=request.user, account__provider='google').last()\n    # print(f'______________{socialGoogleToken}_____________')\n    if socialGoogleToken:\n        access_token = socialGoogleToken.token\n        # CALLENDAR GOOGLE\n        # google_calendar.CallendarService(email_list, access_token)\n        #GOOGLE TASKS",
        "detail": "base.api.views.messages",
        "documentation": {}
    },
    {
        "label": "today_notes_list_create",
        "kind": 2,
        "importPath": "base.api.views.today_tasks",
        "description": "base.api.views.today_tasks",
        "peekOfCode": "def today_notes_list_create(request):\n    if request.method == 'GET':\n        todays_notes = TodaysNotes.objects.filter(user=request.user).order_by('-created_at')\n        data = [{\n                'id': todo.id, \n                'message': todo.message, \n                'created_at': todo.created_at\n                } for todo in todays_notes]\n        return JsonResponse({\n            'size': len(data),",
        "detail": "base.api.views.today_tasks",
        "documentation": {}
    },
    {
        "label": "today_notes_delete",
        "kind": 2,
        "importPath": "base.api.views.today_tasks",
        "description": "base.api.views.today_tasks",
        "peekOfCode": "def today_notes_delete(request, pk):\n    try:\n        todo = TodaysNotes.objects.get(pk=pk)\n        if request.method == 'DELETE':\n            todo.delete()\n            return JsonResponse({\n                'message': 'Today note deleted'}, status=204)\n    except TodaysNotes.DoesNotExist:\n        return JsonResponse({'error': 'Today note not found'}, status=404)",
        "detail": "base.api.views.today_tasks",
        "documentation": {}
    },
    {
        "label": "todo_list_create",
        "kind": 2,
        "importPath": "base.api.views.todo",
        "description": "base.api.views.todo",
        "peekOfCode": "def todo_list_create(request):\n    if request.method == 'GET':\n        todos = Todo.objects.filter(user=request.user).order_by('-created_at')\n        data = [{\n                'id': todo.id, \n                'message': todo.message, \n                'created_at': todo.created_at\n                } for todo in todos]\n        return JsonResponse({\n            'size': todos.count(),",
        "detail": "base.api.views.todo",
        "documentation": {}
    },
    {
        "label": "todo_delete",
        "kind": 2,
        "importPath": "base.api.views.todo",
        "description": "base.api.views.todo",
        "peekOfCode": "def todo_delete(request, pk):\n    try:\n        todo = Todo.objects.get(pk=pk)\n        if request.method == 'DELETE':\n            todo.delete()\n            return JsonResponse({\n                'message': 'Todo deleted successfully'\n            }, status=204)\n    except Todo.DoesNotExist:\n        return JsonResponse({'error': 'Todo not found'}, status=404)",
        "detail": "base.api.views.todo",
        "documentation": {}
    },
    {
        "label": "update_settings",
        "kind": 2,
        "importPath": "base.api.views.user",
        "description": "base.api.views.user",
        "peekOfCode": "def update_settings(request):\n    if request.method == 'POST':\n        user =  User.objects.get(username=request.user.username)\n        email = request.POST.get('email')\n        password = request.POST.get('password')\n        status = False\n        if email != '' and email != request.user.email: \n            try:\n                isHaveUser = User.objects.get(email=email)\n                return JsonResponse({",
        "detail": "base.api.views.user",
        "documentation": {}
    },
    {
        "label": "ProfileSerializer",
        "kind": 6,
        "importPath": "base.api.serializers",
        "description": "base.api.serializers",
        "peekOfCode": "class ProfileSerializer(ModelSerializer):\n   class Meta:\n      model = Profile\n      fields = '__all__'\nclass UserSerializer(ModelSerializer):\n   class Meta:\n      model = User\n      fields = ['username', ]\nclass TodoSerializer(ModelSerializer):\n   user = UserSerializer()",
        "detail": "base.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "base.api.serializers",
        "description": "base.api.serializers",
        "peekOfCode": "class UserSerializer(ModelSerializer):\n   class Meta:\n      model = User\n      fields = ['username', ]\nclass TodoSerializer(ModelSerializer):\n   user = UserSerializer()\n   class Meta:\n      model  = Todo\n      fields = ['id', 'user', 'message', 'created_at']",
        "detail": "base.api.serializers",
        "documentation": {}
    },
    {
        "label": "TodoSerializer",
        "kind": 6,
        "importPath": "base.api.serializers",
        "description": "base.api.serializers",
        "peekOfCode": "class TodoSerializer(ModelSerializer):\n   user = UserSerializer()\n   class Meta:\n      model  = Todo\n      fields = ['id', 'user', 'message', 'created_at']",
        "detail": "base.api.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "base.api.urls",
        "description": "base.api.urls",
        "peekOfCode": "urlpatterns = [\n    # TODO: ____ todos _____\n    path('todos', todo.todo_list_create, name='todo_list_create'),\n    path('todos/<str:pk>', todo.todo_delete, name='todo_delete'),\n    # TODO: ____ today notes _____\n    path('today-notes', today_tasks.today_notes_list_create, name='today_notes_list_create'),\n    path('today-notes/<str:pk>', today_tasks.today_notes_delete, name='today_notes_delete'),\n    # TODO: ____ messages _____\n    path('messages', messages.messages_list, name='messages_list'),  \n    path('update-settings', user.update_settings, name='update_settings'), ",
        "detail": "base.api.urls",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "kind": 2,
        "importPath": "base.api.validators",
        "description": "base.api.validators",
        "peekOfCode": "def validate_email(email):\n   if User.objects.filter(email=email).exists():\n      raise ValidationError('This email is already registered.')\n   return email\ndef validate_username(username):\n   if User.objects.filter(username=username).exists():\n      raise ValidationError('This username is already registered.')\n   return username",
        "detail": "base.api.validators",
        "documentation": {}
    },
    {
        "label": "validate_username",
        "kind": 2,
        "importPath": "base.api.validators",
        "description": "base.api.validators",
        "peekOfCode": "def validate_username(username):\n   if User.objects.filter(username=username).exists():\n      raise ValidationError('This username is already registered.')\n   return username",
        "detail": "base.api.validators",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "base.migrations.0001_initial",
        "description": "base.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Profile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "base.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "base.migrations.0002_profile_google_token",
        "description": "base.migrations.0002_profile_google_token",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('base', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='profile',\n            name='google_token',\n            field=models.CharField(blank=True, max_length=1500),\n        ),",
        "detail": "base.migrations.0002_profile_google_token",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "base.migrations.0003_todo",
        "description": "base.migrations.0003_todo",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('base', '0002_profile_google_token'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Todo',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "base.migrations.0003_todo",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "base.migrations.0004_todo_created_at_todo_updated_at_alter_todo_message",
        "description": "base.migrations.0004_todo_created_at_todo_updated_at_alter_todo_message",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('base', '0003_todo'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='todo',\n            name='created_at',\n            field=models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created Time'),\n        ),",
        "detail": "base.migrations.0004_todo_created_at_todo_updated_at_alter_todo_message",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "base.migrations.0005_todaysnotes",
        "description": "base.migrations.0005_todaysnotes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('base', '0004_todo_created_at_todo_updated_at_alter_todo_message'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TodaysNotes',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "base.migrations.0005_todaysnotes",
        "documentation": {}
    },
    {
        "label": "CallendarService",
        "kind": 2,
        "importPath": "base.services.google.google_calendar",
        "description": "base.services.google.google_calendar",
        "peekOfCode": "def CallendarService(email_list, access_token):\n   async def fetch_callendar():\n      response_calendar = requests.get('https://www.googleapis.com/calendar/v3/calendars/primary/events', params={\n         'access_token': access_token,\n         'maxResults': 10\n      })\n      events = response_calendar.json().get('items', [])\n      for event in events:\n         email_list.append({\n            'id': event['id'],",
        "detail": "base.services.google.google_calendar",
        "documentation": {}
    },
    {
        "label": "GoogleGmailService",
        "kind": 2,
        "importPath": "base.services.google.google_gmail",
        "description": "base.services.google.google_gmail",
        "peekOfCode": "def GoogleGmailService(email_list, access_token, get_email_text, get_header_value):\n   async def fetch_emails():\n      responseEmail = requests.get('https://www.googleapis.com/gmail/v1/users/me/messages', params={\n         'access_token': access_token,\n         'maxResults': 20\n      })\n      # print('______________response______________', response)\n      if responseEmail.status_code == 200:\n         emails = responseEmail.json().get('messages', [])\n         # print('____________emails______________', emails)",
        "detail": "base.services.google.google_gmail",
        "documentation": {}
    },
    {
        "label": "GoogleTodoService",
        "kind": 2,
        "importPath": "base.services.google.google_todos",
        "description": "base.services.google.google_todos",
        "peekOfCode": "def GoogleTodoService(email_list, access_token):\n   async def fetch_todos():\n      response_tasks = requests.get('https://www.googleapis.com/tasks/v1/users/@me/lists', params={\n            'access_token': access_token,\n            'maxResults': 10\n      })     \n      for task_list in response_tasks.json().get('items', []):\n         list_id = task_list['id']\n         # Request tasks for the current list\n         response_tasks = requests.get(f'https://www.googleapis.com/tasks/v1/lists/{list_id}/tasks', params={",
        "detail": "base.services.google.google_todos",
        "documentation": {}
    },
    {
        "label": "get_google_service",
        "kind": 2,
        "importPath": "base.services.google_service",
        "description": "base.services.google_service",
        "peekOfCode": "def get_google_service(request, api_name, api_version, scopes):\n    social_token = SocialToken.objects.get(account__user=request.user, account__provider='google')\n    credentials = Credentials.from_authorized_user_info(\n        social_token.token, scopes=scopes\n    )\n    if not credentials.valid:\n        if credentials.expired and credentials.refresh_token:\n            credentials.refresh(Request())\n            social_token.token = credentials.to_json()\n            social_token.save()",
        "detail": "base.services.google_service",
        "documentation": {}
    },
    {
        "label": "sign_in_view",
        "kind": 2,
        "importPath": "base.views.base_auth_view",
        "description": "base.views.base_auth_view",
        "peekOfCode": "def sign_in_view(request):\n   if request.user.username:\n      return redirect('base:index')\n   page_type = 'sign-in'\n   if request.method == 'POST':\n      email = request.POST.get('email')\n      password = request.POST.get('password')\n      try: \n         user = User.objects.get(username=email)\n      except:",
        "detail": "base.views.base_auth_view",
        "documentation": {}
    },
    {
        "label": "sign_up_view",
        "kind": 2,
        "importPath": "base.views.base_auth_view",
        "description": "base.views.base_auth_view",
        "peekOfCode": "def sign_up_view(request):\n   page_type = 'sign-up'\n   form = CreateUserForm()\n   if request.method == 'POST':\n      form = CreateUserForm(request.POST)\n      if form.is_valid():\n         new_user = form.save(commit=False)\n         new_user.save()\n         login(request, new_user,  backend='django.contrib.auth.backends.ModelBackend' )\n         profile = Profile(user = request.user)",
        "detail": "base.views.base_auth_view",
        "documentation": {}
    },
    {
        "label": "sign_out_view",
        "kind": 2,
        "importPath": "base.views.base_auth_view",
        "description": "base.views.base_auth_view",
        "peekOfCode": "def sign_out_view(request):\n   response = HttpResponseRedirect('/')\n   response.delete_cookie('access_token')\n   logout(request)\n   return response\n@login_required(login_url='base:sign-in')\ndef sign_in_social_media_view(request):\n   user = request.user\n   proifle = Profile.objects.get(user=user)\n   context = {",
        "detail": "base.views.base_auth_view",
        "documentation": {}
    },
    {
        "label": "sign_in_social_media_view",
        "kind": 2,
        "importPath": "base.views.base_auth_view",
        "description": "base.views.base_auth_view",
        "peekOfCode": "def sign_in_social_media_view(request):\n   user = request.user\n   proifle = Profile.objects.get(user=user)\n   context = {\n      'profile': profile\n   }\n   return render(request, 'base/authIncludeAccounts.html', context)\ndef google_login_done(request):\n    if request.user.is_authenticated:\n        user = request.user",
        "detail": "base.views.base_auth_view",
        "documentation": {}
    },
    {
        "label": "google_login_done",
        "kind": 2,
        "importPath": "base.views.base_auth_view",
        "description": "base.views.base_auth_view",
        "peekOfCode": "def google_login_done(request):\n    if request.user.is_authenticated:\n        user = request.user\n        refresh_token = user.socialaccount_set.filter(provider='google')[0].extra_data['refresh_token']\n        # Здесь мы получаем refresh token, связанный с учетной записью Google пользователя\n        # Генерация аксесс токена\n        access_token_response = requests.post(\n            'https://accounts.google.com/o/oauth2/token',\n            data={\n                'grant_type': 'refresh_token',",
        "detail": "base.views.base_auth_view",
        "documentation": {}
    },
    {
        "label": "index_view",
        "kind": 2,
        "importPath": "base.views.index_view",
        "description": "base.views.index_view",
        "peekOfCode": "def index_view(request):\n   # bot_token = '6263736045:AAHXJM8S4NLQKEiH7O1f88pKOa6x9Y0pqLc'\n   # bot = Bot(token=bot_token)\n   # print('___________bot_______________', bot)\n   context = {\n      #  'emails': email_list,\n   }\n   return render(request, 'base/index.html', context)\n@login_required(login_url='base:sign-in')\ndef delete_comment_view(request, task_id):",
        "detail": "base.views.index_view",
        "documentation": {}
    },
    {
        "label": "delete_comment_view",
        "kind": 2,
        "importPath": "base.views.index_view",
        "description": "base.views.index_view",
        "peekOfCode": "def delete_comment_view(request, task_id):\n   task = Todo.objects.get(id=task_id)\n   task.delete()\n   return redirect('/')\n@login_required(login_url='base:sign-in')\ndef delete_today_note_view(request, task_id):\n   task = TodaysNotes.objects.get(id=task_id)\n   task.delete()\n   return redirect('/')",
        "detail": "base.views.index_view",
        "documentation": {}
    },
    {
        "label": "delete_today_note_view",
        "kind": 2,
        "importPath": "base.views.index_view",
        "description": "base.views.index_view",
        "peekOfCode": "def delete_today_note_view(request, task_id):\n   task = TodaysNotes.objects.get(id=task_id)\n   task.delete()\n   return redirect('/')",
        "detail": "base.views.index_view",
        "documentation": {}
    },
    {
        "label": "delete_account",
        "kind": 2,
        "importPath": "base.views.user",
        "description": "base.views.user",
        "peekOfCode": "def delete_account(request):\n    if request.method == 'POST':\n        user =  User.objects.get(username=request.user.username)\n        user.delete()\n        return redirect('base:sign-in')\n    return render(request, 'base/delete.html')",
        "detail": "base.views.user",
        "documentation": {}
    },
    {
        "label": "CustomSocialAccountAdapter",
        "kind": 6,
        "importPath": "base.adapters",
        "description": "base.adapters",
        "peekOfCode": "class CustomSocialAccountAdapter(DefaultSocialAccountAdapter):\n    def save_user(self, request, sociallogin, form=None):\n        user = super().save_user(request, sociallogin, form=form)\n        access_token = sociallogin.token.token\n        refresh_token = sociallogin.token.token_secret\n        token = SocialToken(account=sociallogin.account, token=access_token, token_secret=refresh_token)\n        token.save()\n        return user",
        "detail": "base.adapters",
        "documentation": {}
    },
    {
        "label": "ProfileAdmin",
        "kind": 6,
        "importPath": "base.admin",
        "description": "base.admin",
        "peekOfCode": "class ProfileAdmin(admin.ModelAdmin):\n   list_display = ('user', 'google_token')\nclass TodoAdmin(admin.ModelAdmin):\n   list_display = ('user', 'message', 'created_at' )\nadmin.site.register(Profile)\nadmin.site.register(Todo)\nadmin.site.register(TodaysNotes)",
        "detail": "base.admin",
        "documentation": {}
    },
    {
        "label": "TodoAdmin",
        "kind": 6,
        "importPath": "base.admin",
        "description": "base.admin",
        "peekOfCode": "class TodoAdmin(admin.ModelAdmin):\n   list_display = ('user', 'message', 'created_at' )\nadmin.site.register(Profile)\nadmin.site.register(Todo)\nadmin.site.register(TodaysNotes)",
        "detail": "base.admin",
        "documentation": {}
    },
    {
        "label": "BaseConfig",
        "kind": 6,
        "importPath": "base.apps",
        "description": "base.apps",
        "peekOfCode": "class BaseConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'base'\n    def ready(self):        \n        import base.signals    \n        pre_social_login.connect(pre_social_login_callback)",
        "detail": "base.apps",
        "documentation": {}
    },
    {
        "label": "pre_social_login_callback",
        "kind": 2,
        "importPath": "base.apps",
        "description": "base.apps",
        "peekOfCode": "def pre_social_login_callback(sender, request, sociallogin, **kwargs):\n    socialtoken = sociallogin.token\n    socialaccount = sociallogin.account\n    user = socialaccount.user if hasattr(socialaccount, \"user\") else None\n    if not user:\n        email = socialaccount.extra_data[\"email\"]\n        if email:\n            user = django.contrib.auth.models.User.objects.create_user(\n                username=socialaccount.uid, email=email\n            )",
        "detail": "base.apps",
        "documentation": {}
    },
    {
        "label": "CreateUserForm",
        "kind": 6,
        "importPath": "base.forms",
        "description": "base.forms",
        "peekOfCode": "class CreateUserForm(UserCreationForm):\n   username = CharField(widget=TextInput(attrs={'placeholder': 'Username'}))\n   email = CharField(widget=TextInput(attrs={'placeholder': 'Email'}))\n   password1 = CharField(widget=TextInput(attrs={'type': 'password', 'placeholder': ' Password'}))\n   password2 = CharField(widget=TextInput(attrs={'type': 'password', 'placeholder': 'Repeat your password'}))\n   class Meta:\n      model = User\n      fields = ['username', 'email', 'password1','password2']\nclass CustomSignupForm(SignupForm):\n    first_name = CharField(max_length=30, label='First Name')",
        "detail": "base.forms",
        "documentation": {}
    },
    {
        "label": "CustomSignupForm",
        "kind": 6,
        "importPath": "base.forms",
        "description": "base.forms",
        "peekOfCode": "class CustomSignupForm(SignupForm):\n    first_name = CharField(max_length=30, label='First Name')\n    last_name = CharField(max_length=30, label='Last Name')\n    def signup(self, request, user):\n        user.first_name = self.cleaned_data['first_name']\n        user.last_name = self.cleaned_data['last_name']\n        user.save()\n        return user",
        "detail": "base.forms",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "base.models",
        "description": "base.models",
        "peekOfCode": "class Profile(models.Model):\n   MOTIVATE_CONTENT = (\n      ('text', 'text'),\n      ('image', 'image'),\n   )\n   user = models.ForeignKey(User, on_delete=models.CASCADE)\n   image = models.FileField(upload_to='motivate-content/', blank=True)\n   text = models.CharField(max_length=100, blank=True)\n   google_token = models.CharField(max_length=1500, blank=True)\n   def __str__(self):",
        "detail": "base.models",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "base.models",
        "description": "base.models",
        "peekOfCode": "class Todo(models.Model):\n   user = models.ForeignKey(User, on_delete=models.CASCADE)\n   message = models.CharField(max_length=500, default='')\n   created_at = models.DateTimeField('Created Time', auto_now_add = True, null=True)\n   updated_at = models.DateTimeField(auto_now=True, null=True)\n   def __str__(self):\n      return f'{self.user.username} - {self.message} - {self.created_at}'\nclass TodaysNotes(models.Model):\n   user = models.ForeignKey(User, on_delete=models.CASCADE)\n   message = models.CharField(max_length=500, default='')",
        "detail": "base.models",
        "documentation": {}
    },
    {
        "label": "TodaysNotes",
        "kind": 6,
        "importPath": "base.models",
        "description": "base.models",
        "peekOfCode": "class TodaysNotes(models.Model):\n   user = models.ForeignKey(User, on_delete=models.CASCADE)\n   message = models.CharField(max_length=500, default='')\n   created_at = models.DateTimeField('Created Time', auto_now_add = True, null=True)\n   updated_at = models.DateTimeField(auto_now=True, null=True)\n   def __str__(self):\n      return f'{self.user.username} - {self.message} - {self.created_at}'",
        "detail": "base.models",
        "documentation": {}
    },
    {
        "label": "create_profile_model",
        "kind": 2,
        "importPath": "base.signals",
        "description": "base.signals",
        "peekOfCode": "def create_profile_model(sender,instance, created, **kwargs):\n   if created:\n      Profile.objects.create(user = instance)",
        "detail": "base.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "base.urls",
        "description": "base.urls",
        "peekOfCode": "urlpatterns = [\n   path('',index_view, name='index'),\n   path('tasks/<int:task_id>/delete', delete_comment_view, name='task_delete'),\n   path('today_notes/<int:task_id>/delete', delete_today_note_view, name='delete_today_note'),\n   path('sign-in', sign_in_view, name='sign-in'),\n   path('sign-up', sign_up_view, name='sign-up'),\n   path('sign-out', sign_out_view, name='sign-out'),\n   path('google-login/done/', google_login_done, name='google_login_done'),\n   path('sign-in-social-media-view', sign_in_social_media_view, name='sign-in-social-media'),\n   path('delete-account/', delete_account, name='delete_account'),",
        "detail": "base.urls",
        "documentation": {}
    },
    {
        "label": "get_header_value",
        "kind": 2,
        "importPath": "base.utils",
        "description": "base.utils",
        "peekOfCode": "def get_header_value(headers, name):\n    for header in headers:\n        if header['name'] == name:\n            return header['value']\n    return None\ndef get_email_text(payload):\n    if 'parts' in payload:\n        for part in payload['parts']:\n            if 'body' in part:\n                data = part['body'].get('data')",
        "detail": "base.utils",
        "documentation": {}
    },
    {
        "label": "get_email_text",
        "kind": 2,
        "importPath": "base.utils",
        "description": "base.utils",
        "peekOfCode": "def get_email_text(payload):\n    if 'parts' in payload:\n        for part in payload['parts']:\n            if 'body' in part:\n                data = part['body'].get('data')\n                if data:\n                    return base64.urlsafe_b64decode(data).decode('utf-8')\n    return None\ndef refresh_token(token, refresh_token):\n    provider = token.account.provider",
        "detail": "base.utils",
        "documentation": {}
    },
    {
        "label": "refresh_token",
        "kind": 2,
        "importPath": "base.utils",
        "description": "base.utils",
        "peekOfCode": "def refresh_token(token, refresh_token):\n    provider = token.account.provider\n    provider_instance = registry.by_id(provider)\n    access_token = token.token\n    # Call the refresh_token method provided by the authentication provider\n    new_token = provider_instance.get_refreshed_token(access_token, refresh_token)\n    # Update the token in your database or storage\n    token.token = new_token\n    token.save()\n    return new_token",
        "detail": "base.utils",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mysite.asgi",
        "description": "mysite.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "mysite.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '_6jbso1z+%9-qbavp0656*cxi@)#i$(%=(#2i)ly@osu@zh!w3'\n# TODO: generate new secret key\n# * python -c 'import secrets; print(secrets.token_hex(24))' \n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# DEVELOPMENT_MODE = os.environ.get(\"DEVELOPMENT_MODE\", True)",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "SECRET_KEY = '_6jbso1z+%9-qbavp0656*cxi@)#i$(%=(#2i)ly@osu@zh!w3'\n# TODO: generate new secret key\n# * python -c 'import secrets; print(secrets.token_hex(24))' \n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# DEVELOPMENT_MODE = os.environ.get(\"DEVELOPMENT_MODE\", True)\n# ALLOWED_HOSTS = os.environ.get(\"DJANGO_ALLOWED_HOSTS\", \"127.0.0.1,localhost\").split(\",\")\nALLOWED_HOSTS = ['*']\n# pip install django djangorestframework django-cors-headers django-allauth django_extension djangorestframework-simplejwt dj_database_url google-auth google-api-python-client python-telegram-bot\n# Application definition",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "DEBUG = True\n# DEVELOPMENT_MODE = os.environ.get(\"DEVELOPMENT_MODE\", True)\n# ALLOWED_HOSTS = os.environ.get(\"DJANGO_ALLOWED_HOSTS\", \"127.0.0.1,localhost\").split(\",\")\nALLOWED_HOSTS = ['*']\n# pip install django djangorestframework django-cors-headers django-allauth django_extension djangorestframework-simplejwt dj_database_url google-auth google-api-python-client python-telegram-bot\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# pip install django djangorestframework django-cors-headers django-allauth django_extension djangorestframework-simplejwt dj_database_url google-auth google-api-python-client python-telegram-bot\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'base',\n    'django.contrib.sites',\n    'django_extensions',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "SITE_ID = 2\nSOCIALACCOUNT_LOGIN_ON_GET=True\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    # 'allauth.account.auth_backends.AuthenticationBackend',\n    \"corsheaders.middleware.CorsMiddleware\",",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = '/'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    # 'allauth.account.auth_backends.AuthenticationBackend',\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    # 'allauth.account.auth_backends.AuthenticationBackend',\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "ROOT_URLCONF = 'mysite.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates',\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates',\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "WSGI_APPLICATION = 'mysite.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n        # 'ENGINE': 'django.db.backends.postgresql',\n        # 'NAME': 'railway',\n        # 'HOST': 'containers-us-west-11.railway.app',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n        # 'ENGINE': 'django.db.backends.postgresql',\n        # 'NAME': 'railway',\n        # 'HOST': 'containers-us-west-11.railway.app',\n        # 'PORT': '6121',\n        # 'PASSWORD': 'Ob07Ocsi2UIgTnVaVIXd',\n        # 'USER': 'postgres',",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT =  BASE_DIR / 'static/media'",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT =  BASE_DIR / 'static/media'\nSTATICFILES_DIRS = [",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT =  BASE_DIR / 'static/media'\nSTATICFILES_DIRS = [\n    BASE_DIR /'static'",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT =  BASE_DIR / 'static/media'\nSTATICFILES_DIRS = [\n    BASE_DIR /'static'\n]",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT =  BASE_DIR / 'static/media'\nSTATICFILES_DIRS = [\n    BASE_DIR /'static'\n]\n# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT =  BASE_DIR / 'static/media'\nSTATICFILES_DIRS = [\n    BASE_DIR /'static'\n]\n# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT =  BASE_DIR / 'static/media'\nSTATICFILES_DIRS = [\n    BASE_DIR /'static'\n]\n# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSOCIALACCOUNT_PROVIDERS = {",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "MEDIA_ROOT =  BASE_DIR / 'static/media'\nSTATICFILES_DIRS = [\n    BASE_DIR /'static'\n]\n# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR /'static'\n]\n# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile', \n            'email',\n            'https://www.googleapis.com/auth/gmail.readonly',\n            'https://www.googleapis.com/auth/tasks.readonly',\n            'https://www.googleapis.com/auth/calendar.readonly',\n        ],",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile', \n            'email',\n            'https://www.googleapis.com/auth/gmail.readonly',\n            'https://www.googleapis.com/auth/tasks.readonly',\n            'https://www.googleapis.com/auth/calendar.readonly',\n        ],\n        'AUTH_PARAMS': {",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nSOCIALACCOUNT_QUERY_EMAIL = True\nSOCIALACCOUNT_EMAIL_REQUIRED = True\nSOCIALACCOUNT_STORE_TOKENS = True\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\nTEMPLATE_CONTEXT_PROCESSORS = (",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = 'email'\nSOCIALACCOUNT_QUERY_EMAIL = True\nSOCIALACCOUNT_EMAIL_REQUIRED = True\nSOCIALACCOUNT_STORE_TOKENS = True\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\nTEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.request\",",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_QUERY_EMAIL",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "SOCIALACCOUNT_QUERY_EMAIL = True\nSOCIALACCOUNT_EMAIL_REQUIRED = True\nSOCIALACCOUNT_STORE_TOKENS = True\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\nTEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.request\",\n    \"allauth.account.context_processors.account\",",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "SOCIALACCOUNT_EMAIL_REQUIRED = True\nSOCIALACCOUNT_STORE_TOKENS = True\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\nTEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.request\",\n    \"allauth.account.context_processors.account\",\n    \"allauth.socialaccount.context_processors.socialaccount\",",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_STORE_TOKENS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "SOCIALACCOUNT_STORE_TOKENS = True\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\nTEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.request\",\n    \"allauth.account.context_processors.account\",\n    \"allauth.socialaccount.context_processors.socialaccount\",\n)",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\nTEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.request\",\n    \"allauth.account.context_processors.account\",\n    \"allauth.socialaccount.context_processors.socialaccount\",\n)\n# CORS_ALLOWED_ORIGINS = [",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_CONTEXT_PROCESSORS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "TEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.request\",\n    \"allauth.account.context_processors.account\",\n    \"allauth.socialaccount.context_processors.socialaccount\",\n)\n# CORS_ALLOWED_ORIGINS = [\n#     'http://127.0.0.1:8000',\n#     'http://127.0.0.1:8080'\n# ]\\\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        # 'rest_framework.permissions.IsAuthenticated',\n    ],\n}\nSIMPLE_JWT = {",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        # 'rest_framework.permissions.IsAuthenticated',\n    ],\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "mysite.settings",
        "description": "mysite.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n}\n# CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID'),\n# CLIENT_SECRET = os.environ.get('GOOGLE_SECRET')\n# REDIRECT_URI = '/'\n# # URL для авторизации пользователя\n# GOOGLE_AUTH_URL = 'https://accounts.google.com/o/oauth2/auth'\n# # URL для обмена авторизационного кода на токены доступа и обновления\n# GOOGLE_TOKEN_URL = 'https://oauth2.googleapis.com/token'",
        "detail": "mysite.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mysite.urls",
        "description": "mysite.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('base.urls')),\n    path('api/', include('base.api.urls')),\n    path('accounts/', include('allauth.urls')),\n    path('privacy-police', views.privacy_policy, name='privacy'),\n    path('terms-of-use', views.terms_of_use, name='terms'),\n    path('delete-instructions', views.delete_instructions, name='delete-instructions'),\n]",
        "detail": "mysite.urls",
        "documentation": {}
    },
    {
        "label": "privacy_policy",
        "kind": 2,
        "importPath": "mysite.views",
        "description": "mysite.views",
        "peekOfCode": "def privacy_policy(request):\n    return render(request, 'special/privacy_police.html')\ndef terms_of_use(request):\n    return render(request, 'special/terms_of_use.html')\ndef delete_instructions(request):\n    return render(request, 'special/delete_instructions.html')",
        "detail": "mysite.views",
        "documentation": {}
    },
    {
        "label": "terms_of_use",
        "kind": 2,
        "importPath": "mysite.views",
        "description": "mysite.views",
        "peekOfCode": "def terms_of_use(request):\n    return render(request, 'special/terms_of_use.html')\ndef delete_instructions(request):\n    return render(request, 'special/delete_instructions.html')",
        "detail": "mysite.views",
        "documentation": {}
    },
    {
        "label": "delete_instructions",
        "kind": 2,
        "importPath": "mysite.views",
        "description": "mysite.views",
        "peekOfCode": "def delete_instructions(request):\n    return render(request, 'special/delete_instructions.html')",
        "detail": "mysite.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mysite.wsgi",
        "description": "mysite.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "mysite.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]